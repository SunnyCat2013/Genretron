!obj:pylearn2.train.Train {
    dataset: &train !obj:genretron.gtzan.GTZAN_On_Memory {
        which_set: "train",
        seconds: &seconds 8.0,
        seed: &seed 1234,
        balanced_splits: True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        seed: *seed,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [513, 347],
            num_channels: 1,
        },
        layers: [
                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                        layer_name: 'h0',
                        output_channels: 64,
                        irange: .05,
                        kernel_shape: [513, 4],
                        pool_shape: [1, 4],
                        pool_stride: [1, 2],
                        max_kernel_norm: 1.9365,
                    },
                    !obj:pylearn2.models.mlp.RectifiedLinear {
                        layer_name: 'h1',
                        max_col_norm: 1.9365,
                        dim: 5,
                        irange: 0.05,
                    },
                    !obj:pylearn2.models.mlp.Softmax {
                        max_col_norm: 1.9365,
                        layer_name: 'y',
                        istdev: .05,
                        n_classes: 10
                    }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: 0.01,
        batch_size: 100,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "valid",
                            seconds: *seconds,
                            seed: *seed,
                            balanced_splits: True,
                          },
                'test'  : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "test",
                            seconds: *seconds,
                            seed: *seed,
                            balanced_splits: True,
                          }
            },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.01,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 500
                },
            ]
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.mlp.Default {},
                !obj:pylearn2.costs.mlp.FusedLasso {
                    coeffs: {
                        'h0': .005,
                        # 'h1': 16.0,
                        # 'y': %(l1_weight_decay)f
                    },
                    axes: {
                        'h0': 1
                    },
                }
            ]
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "model_best.pkl"
        },
    ],
    save_freq: 1,
    save_path: "model.pkl"
}
