!obj:pylearn2.train.Train {
    dataset: &train !obj:genretron.gtzan.GTZAN_On_Memory {
        which_set: "train",
        seed: &seed 1234,
        seconds: &seconds 8.,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 50,
        seed: *seed,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [513, 343],
            num_channels: 1,
        },
        layers: [
                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                        layer_name: 'h0',
                        output_channels: 64,
                        irange: .05,
                        kernel_shape: [513, 4],
                        pool_shape: [1, 4],
                        pool_stride: [1, 2],
                        max_kernel_norm: 1.9365,
                    },
                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                        layer_name: 'h1',
                        output_channels: 32,
                        irange: .05,
                        kernel_shape: [1, 4],
                        pool_shape: [1, 4],
                        pool_stride: [1, 2],
                        max_kernel_norm: 1.9365,
                    },
                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                        layer_name: 'h2',
                        output_channels: 64,
                        irange: .05,
                        kernel_shape: [1, 4],
                        pool_shape: [1, 4],
                        pool_stride: [1, 2],
                        max_kernel_norm: 1.9365,
                    },
                    !obj:pylearn2.models.mlp.Softmax {
                        max_col_norm: 1.9365,
                        layer_name: 'y',
                        istdev: .05,
                        n_classes: 10
                    }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: 0.01,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "valid",
                            seed: *seed,
                            seconds: *seconds
                          },
                'test'  : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "test",
                            seed: *seed,
                            seconds: *seconds
                          }
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [
                !obj:pylearn2.costs.mlp.Default {},
                !obj:pylearn2.costs.mlp.L1WeightDecay {
                    coeffs: { 'h0': %(l1_weight_decay)f },
                }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: .001,
            N: 50
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "model_best.pkl"
        },
    ],
    save_freq: 1,
    save_path: "model.pkl"
}

