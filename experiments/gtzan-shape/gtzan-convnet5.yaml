!obj:pylearn2.train.Train {
    dataset: &train !obj:genretron.gtzan.GTZAN_On_Memory {
        which_set: "train",
        seconds: &seconds 30.,
        seed: &seed 1234,
        balanced_splits: True,
        preprocessor: znormalizer,
        scale_factors: &scale_factors [10, 10],
        # use_whole_song: True,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 125,
        seed: *seed,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [51, 129],
            num_channels: 1,
        },
        layers: [
                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                        layer_name: 'h0',
                        output_channels: 64,
                        irange: .05,
                        kernel_shape: [5, 5],
                        pool_shape: [2, 2],
                        pool_stride: [1, 1],
                        max_kernel_norm: 1.9365,
                    },
                    !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                        layer_name: 'h1',
                        output_channels: 64,
                        irange: .05,
                        kernel_shape: [5, 5],
                        pool_shape: [1, 2],
                        pool_stride: [1, 1],
                        max_kernel_norm: 1.9365,
                    },
                    !obj:pylearn2.models.mlp.Softmax {
                        max_col_norm: 1.9365,
                        layer_name: 'y',
                        istdev: .05,
                        n_classes: 10
                    }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: 0.01,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "valid",
                            seconds: *seconds,
                            seed: *seed,
                            balanced_splits: True,
                            preprocessor: znormalizer,
                            scale_factors: *scale_factors,
                            # use_whole_song: True,
                          },
                'test'  : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "test",
                            seconds: *seconds,
                            seed: *seed,
                            balanced_splits: True,
                            preprocessor: znormalizer,
                            scale_factors: *scale_factors,
                            # use_whole_song: True,
                          }
            },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.0001,
                    N: 20
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 500
                },
            ]
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "gtzan-shape-convnet1_best.pkl"
        },
    ],
    save_freq: 1,
    save_path: "gtzan-shape-convnet1.pkl"
}
