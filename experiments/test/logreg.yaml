!obj:pylearn2.train.Train {
    dataset: &train !obj:genretron.gtzan.GTZAN_On_Memory {
        which_set: "train",
        window_size: &window_size 2048,
        seconds: &seconds 16.0,
        seed: &seed 1234,
        space: &space vector,
        balanced_splits: &balanced_splits True,
    },
    model: !obj:genretron.logistic_regression.LogisticRegression {
        nvis: 513,
        nclasses: 10,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 62300,
        learning_rate: .01,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "valid",
                            window_size: *window_size,
                            seconds: *seconds,
                            seed: *seed,
                            space: *space,
                            balanced_splits: *balanced_splits
                          },
                'test'  : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: "test",
                            window_size: *window_size,
                            seconds: *seconds,
                            seed: *seed,
                            space: *space,
                            balanced_splits: *balanced_splits
                          }
            },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_error",
            prop_decrease: 0.001,
            N: 100
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_error',
             save_path: "results/${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
    ],
    save_freq: 1,
    save_path: "results/${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl"
}
