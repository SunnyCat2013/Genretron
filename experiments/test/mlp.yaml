!obj:pylearn2.train.Train {
    dataset: &train !obj:genretron.gtzan.GTZAN_On_Memory {
        which_set: 'train',
        space: &space 'vector',
        seconds: &seconds 4.0,
        seed: &seed 1234,
    },
    model: !obj:pylearn2.models.mlp.MLP {
        seed: *seed,
        layers: [
                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     irange: .005,
                     layer_name: 'h0',
                     dim: 50,
                 },
                 !obj:pylearn2.models.mlp.Softmax {
                     irange: .005,
                     layer_name: 'y',
                     n_classes: 10,
                 }
                ],
        input_space: !obj:pylearn2.space.VectorSpace {
            dim: 513,
        },
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        learning_rate: 0.01,
        batch_size: 62300,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: 'valid',
                            space: *space,
                            seconds: *seconds,
                            seed: *seed,
                          },
                'test'  : !obj:genretron.gtzan.GTZAN_On_Memory {
                            which_set: 'test',
                            space: *space,
                            seconds: *seconds,
                            seed: *seed,
                          }
            },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.001,
            N: 20
        },
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "results/${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
    ],
    save_freq: 1,
    save_path: "results/${PYLEARN2_TRAIN_FILE_FULL_STEM}.pkl",
}
