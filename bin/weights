#!/usr/bin/env python
"""
Plays the weight matrices of a pickled model
"""
from __future__ import division
import matplotlib
matplotlib.use('Agg')
from genretron.gtzan import GTZAN, GTZAN_On_Memory
from genretron.spectrogram import Spectrogram
from pylearn2.datasets import control
from pylearn2.config import yaml_parse
from pylearn2.utils import serial
from pylearn2.models.softmax_regression import SoftmaxRegression
import argparse
import logging
import numpy as np
import os
import re
import math
import pylearn2.config.yaml_parse
import librosa.output
import librosa.util

logger = logging.getLogger(os.path.basename(__file__))


def get_weights(model=None, norm_sort=False, dataset=None):
    if isinstance(model, dict):
        # assume this was a saved matlab dictionary
        del model['__version__']
        del model['__header__']
        del model['__globals__']
        keys = [key for key in model
                if hasattr(model[key], 'ndim') and model[key].ndim == 2]
        if len(keys) > 2:
            key = None
            while key not in keys:
                logger.info('Which is the weights?')
                for key in keys:
                    logger.info('\t{0}'.format(key))
                key = input()
        else:
            key, = keys
        weights = model[key]

        norms = np.sqrt(np.square(weights).sum(axis=1))
        logger.info('min norm: {0}'.format(norms.min()))
        logger.info('mean norm: {0}'.format(norms.mean()))
        logger.info('max norm: {0}'.format(norms.max()))

        return weights

    weights_view = None
    W = None

    try:
        weights_view = model.get_weights_topo()
        h = weights_view.shape[0]
    except NotImplementedError:

        if dataset is None:
            logger.info('loading dataset...')
            control.push_load_data(False)
            dataset = yaml_parse.load(model.dataset_yaml_src)
            control.pop_load_data()
            logger.info('...done')

        try:
            W = model.get_weights()
        except AttributeError as e:
            reraise_as(AttributeError("""
Encountered an AttributeError while trying to call get_weights on a model.
This probably means you need to implement get_weights for this model class,
but look at the original exception to be sure.
If this is an older model class, it may have weights stored as weightsShared,
etc.
Original exception: """ + str(e)))

    if W is None and weights_view is None:
        raise ValueError("model doesn't support any weights interfaces")

    if weights_view is None:
        weights_format = model.get_weights_format()
        assert hasattr(weights_format, '__iter__')
        assert len(weights_format) == 2
        assert weights_format[0] in ['v', 'h']
        assert weights_format[1] in ['v', 'h']
        assert weights_format[0] != weights_format[1]

        if weights_format[0] == 'v':
            W = W.T
        h = W.shape[0]

        if norm_sort:
            norms = np.sqrt(1e-8 + np.square(W).sum(axis=1))
            norm_prop = norms / norms.max()

        weights_view = dataset.get_weights_view(W)
        assert weights_view.shape[0] == h
    try:
        hr, hc = model.get_weights_view_shape()
    except NotImplementedError:
        hr = int(np.ceil(np.sqrt(h)))
        hc = hr
        if 'hidShape' in dir(model):
            hr, hc = model.hidShape

    if norm_sort:
        logger.info('sorting weights by decreasing norm')
        idx = sorted(range(h), key=lambda l: -norm_prop[l])
    else:
        idx = range(h)

    patches = [weights_view[idx[i], ...] for i in range(0, h)]

    abs_weights = np.abs(weights_view)
    logger.info('smallest enc weight magnitude: {0}'.format(abs_weights.min()))
    logger.info('mean enc weight magnitude: {0}'.format(abs_weights.mean()))
    logger.info('max enc weight magnitude: {0}'.format(abs_weights.max()))

    if W is not None:
        norms = np.sqrt(np.square(W).sum(axis=1))
        assert norms.shape == (h, )
        logger.info('min norm: {0}'.format(norms.min()))
        logger.info('mean norm: {0}'.format(norms.mean()))
        logger.info('max norm: {0}'.format(norms.max()))

    return patches


def get_dataset_keywords(model=None):
    dataset = pylearn2.config.yaml_parse.load(model.dataset_yaml_src,
                                              instantiate=False)
    assert dataset.callable is GTZAN_On_Memory
    return dataset.keywords


def play_weights(out, model_path=None, model=None, repetitions=1):
    weights = get_weights(model=model)
    weights = np.squeeze(weights)
    dataset_keywords = get_dataset_keywords(model=model)
    dataset = GTZAN(**dataset_keywords)

    for index, weight in enumerate(weights):
        if dataset.scale_factors is not None:
            logger.warning('scaled spectrograms may not be zoomed to the '
                           'exact original dimensions')
            weight = Spectrogram.zoom(weight, dataset.scale_factors)
        repeated_weight = np.tile(weight, (1, repetitions))
        signal = Spectrogram.signal_from_spectrogram(
            spectrogram=repeated_weight,
            step_size=dataset.step_size)
        normalized_signal = librosa.util.normalize(signal,
                                                   norm=np.inf,
                                                   axis=None)
        if isinstance(model, SoftmaxRegression):
            weight_name = dataset.genres[index]
        else:
            weight_name = index

        filename = "{0}.{1}.wav".format(out, weight_name)
        librosa.output.write_wav(filename, normalized_signal,
                                 sr=dataset.samplerate)

def get_normalized_model_name(model_path):
    # assuming it ends with -best.pkl
    return os.path.basename(model_path).split('-best.pkl')[0].replace('-', '_')

def get_currentconf(model_path):
    return os.path.join(os.path.dirname(os.path.dirname(model_path)), 'current.conf')

def get_title(model_path):
    return to_natural_lang(get_normalized_model_name(model_path))

def get_output_path(model_path):
    return "{0}.png".format(get_normalized_model_name(model_path))

def get_valid_misclass(model):
    result = model.monitor.channels.get('valid_y_misclass')
    return None if result is None else result.val_record[-1]

def get_train_misclass(model):
    result = model.monitor.channels.get('train_y_misclass')
    return None if result is None else result.val_record[-1]

def get_test_misclass(model):
    result = model.monitor.channels.get('test_y_misclass')
    return None if result is None else result.val_record[-1]

def get_fl1_obj(model):
    result = model.monitor.channels.get('train_term_2_fused_lasso')
    return None if result is None else result.val_record[-1]

def get_fl2_obj(model):
    result = model.monitor.channels.get('train_term_3_fused_lasso')
    return None if result is None else result.val_record[-1]

def get_l1_obj(model):
    result = model.monitor.channels.get('train_term_1_l1_penalty')
    return None if result is None else result.val_record[-1]


def get_hyperparameters(currentconf):
    hp = {}
    for line in open(currentconf, 'r'):
        match = re.match(r"^hyper_parameters\.(.+) = (.+)$", line)
        if match:
            hp[match.group(1)] = float(match.group(2))
    return hp

def get_textbox_str(model, currentconf):
    hyperparam_str = "\n".join(["{0} = {1:.7f}".format(to_natural_lang(k), v) for k, v in get_hyperparameters(currentconf).items()])

    l1_obj = get_l1_obj(model)
    fl1_obj = get_fl1_obj(model)
    fl2_obj = get_fl2_obj(model)
    l1_string = "$L_1 obj$ = {0:.7f}".format(float(l1_obj)) if l1_obj is not None else ""
    fl1_string = "$FL_1 obj$ = {0:.7f}".format(float(fl1_obj)) if fl1_obj is not None else ""
    fl2_string = "$FL_2 obj$ = {0:.7f}".format(float(fl2_obj)) if fl2_obj is not None else ""
    param_str = "\n{0}\n{1}\n{2}".format(l1_string, fl1_string, fl2_string)

    return "{0:.2f}% Train err.\n{1:.2f}% Valid err.\n{2:.2f}% Test err.\n\n{3}\n{4}".format(
        get_train_misclass(model)*100,
        get_valid_misclass(model)*100,
        get_test_misclass(model)*100,
        hyperparam_str,
        param_str)


def plot_weights(args, model=None):
    out = args.out if args.out is not None else get_output_path(args.model_path)
    title = args.title if args.title is not None else get_title(args.model_path)
    weights = get_weights(model=model)
    rows = math.sqrt(math.sqrt(int(len(weights))))
    rows = int(rows) if math.floor(rows) == rows else args.rows
    import matplotlib.pyplot as plt
    fontdict = { 'fontsize': 7 }
    fig, axes = plt.subplots(
        rows, int(len(weights) / rows), subplot_kw={'xticks': [], 'yticks': []})
    for index, (ax, patch) in enumerate(zip(axes.flat, weights)):
        ax.imshow(np.squeeze(patch), interpolation='none')
        ax.set_title(index, fontdict=fontdict)
    plt.suptitle(title)
    plt.figtext(0.005, 0.9, get_textbox_str(model, get_currentconf(args.model_path)), fontdict=fontdict, va='top')
    if args.tight:
        plt.tight_layout()
    if args.out is None:
        plt.show()
    else:
        plt.savefig(args.out, dpi=300)


def to_natural_lang(label):
    translation = {
        'l1': r"$L_1 \lambda$",
        'hyperparameters_l1': r"$L_1 \lambda$",
        'fl': r"$FL \lambda$",
        'hyperparameters_fl': r"$FL \lambda$",
        "results_trainymisclass": "Training",
        "results_testymisclass": "Test",
        "results_validymisclass": "Validation",
        "gtzan_conv_l1_base": "GTZAN ConvNet with L1",
        "gtzan_conv_l1_fl_2d": "GTZAN ConvNet with L1 and 2D Fused Lasso",
        "gtzan_conv_l1_fl_horiz": "GTZAN ConvNet with L1 and Horizontal Fused Lasso",
        "gtzan_conv_l1_fl_vert": "GTZAN ConvNet with L1 and Vertical Fused Lasso",
        "gtzan_softmax_l1_base": "GTZAN Softmax Regression with L1",
        "gtzan_softmax_l1_fl_horiz": "GTZAN Softmax Regression with L1 and Horizontal Fused Lasso",
        "gtzan_softmax_l1_fl_horiz_bgd": "GTZAN Softmax Regression with L1 and Horizontal Fused Lasso",
        "mnist_softmax_l1_base": "MNIST Softmax Regression with L1",
        "mnist_softmax_l1_fl_2d": "MNIST Softmax Regression with L1 and 2D Fused Lasso",
        "mnist_softmax_l1_fl_2d_bgd": "MNIST Softmax Regression with L1 and 2D Fused Lasso"
    }
    return translation[label]

def make_argument_parser():
    """
    Creates an ArgumentParser to read the options for this script from
    sys.argv
    """
    parser = argparse.ArgumentParser()

    parser.add_argument("action", choices=("play", "plot"))
    parser.add_argument("model_path")
    parser.add_argument("--out", default=None)
    parser.add_argument("--repetitions", default=5)
    parser.add_argument("--rows", default=2)
    parser.add_argument("--title", default=None)
    parser.add_argument("--tight", dest='tight', action="store_true", default=False)
    return parser


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)
    parser = make_argument_parser()
    args = parser.parse_args()
    logger.info('loading model')
    model = serial.load(args.model_path)
    logger.info('loading done')
    if args.action == "play":
        assert args.out is not None
        play_weights(args.out,
                     model_path=args.model_path,
                     model=model,
                     repetitions=args.repetitions)
    elif args.action == "plot":
        plot_weights(args,
                     model=model)
