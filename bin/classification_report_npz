#!/usr/bin/env python

import os
import argparse
import numpy
from progress.bar import Bar
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('predictions')
    parser.add_argument('--set', default='test')
    parser.add_argument('--cm', action='store_true')
    parser.add_argument('--save', action='store_true')
    return parser.parse_args()


def get_space(model):
    if model.dataset_yaml_src.find('vector') > 0:
        return 'vector'
    if model.dataset_yaml_src.find('conv2d') > 0:
        return 'conv2d'


def plot_confusion_matrix(cm, title, labels, cmap):
    import matplotlib.pyplot as plt
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    # plt.title(title)
    plt.colorbar()
    tick_marks = numpy.arange(len(labels))
    plt.xticks(tick_marks, labels, rotation=45)
    plt.yticks(tick_marks, labels)
    # plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')


def get_save_path(predictions_path, model_index):
    return "{}_{}".format(os.path.basename(predictions_path).split('.npz')[0],
                          model_index)


if __name__ == '__main__':
    args = parse_args()

    sets = ['train', 'valid', 'test']

    npzfile = numpy.load(args.predictions)

    labels = npzfile['labels']
    y_trues = npzfile['y_trues']
    y_true_mvs = npzfile['y_true_mvs']
    y_preds = npzfile['y_preds']
    y_pred_mvs = npzfile['y_pred_mvs']
    l1s = npzfile['l1s']
    fls = npzfile['fls']

    bar = Bar('Processing', max=len(y_trues))
    for mi, y_true_per_model in enumerate(y_trues):
        si = sets.index(args.set)

        y_true = y_trues[mi][si]
        y_true_mv = y_true_mvs[mi][si]
        y_pred = y_preds[mi][si]
        y_pred_mv = y_pred_mvs[mi][si]

        # classification report
        report = "Without majority voting:\n" + classification_report(
            y_true, y_pred, target_names=labels)

        report += "With majority voting:\n" + classification_report(
            y_true_mv, y_pred_mv, target_names=labels)

        if args.save:
            save_path = get_save_path(args.predictions, mi + 1) + '.txt'
            with open(save_path, 'w') as f:
                f.write(report)
        else:
            print(report)

        # calculate confusion matrix
        if args.cm:
            cm = confusion_matrix(y_true_mv, y_pred_mv)
            cm_normalized = cm.astype(
                'float') / cm.sum(axis=1)[:, numpy.newaxis]

            # plot confusion matrix
            plt.figure()
            plot_confusion_matrix(
                cm_normalized, "confusion matrix", labels, plt.cm.Blues)
            if args.save:
                save_path = get_save_path(args.predictions, mi + 1) + '.pdf'
                plt.savefig(save_path, dpi=300, bbox_inches='tight')
            else:
                plt.show()

        bar.next()
    bar.finish()
