#!/usr/bin/env python
"""
Plays the weight matrices of a pickled model
"""
from genretron.gtzan import GTZAN, GTZAN_On_Memory
from genretron.spectrogram import Spectrogram
from pylearn2.utils import serial
import argparse
import logging
import numpy as np
import pylearn2.config.yaml_parse
import stft

logger = logging.getLogger(__name__)


def get_weights(model_path=None, model=None, norm_sort=False, dataset=None):
    if model is None:
        logger.info('making weights report')
        logger.info('loading model')
        model = serial.load(model_path)
        logger.info('loading done')
    else:
        assert model_path is None
    assert model is not None

    if isinstance(model, dict):
        #assume this was a saved matlab dictionary
        del model['__version__']
        del model['__header__']
        del model['__globals__']
        keys = [key for key in model \
                if hasattr(model[key], 'ndim') and model[key].ndim == 2]
        if len(keys) > 2:
            key = None
            while key not in keys:
                logger.info('Which is the weights?')
                for key in keys:
                    logger.info('\t{0}'.format(key))
                key = input()
        else:
            key, = keys
        weights = model[key]

        norms = np.sqrt(np.square(weights).sum(axis=1))
        logger.info('min norm: {0}'.format(norms.min()))
        logger.info('mean norm: {0}'.format(norms.mean()))
        logger.info('max norm: {0}'.format(norms.max()))

        return weights

    weights_view = None
    W = None

    try:
        weights_view = model.get_weights_topo()
        h = weights_view.shape[0]
    except NotImplementedError:

        if dataset is None:
            logger.info('loading dataset...')
            control.push_load_data(False)
            dataset = yaml_parse.load(model.dataset_yaml_src)
            control.pop_load_data()
            logger.info('...done')

        try:
            W = model.get_weights()
        except AttributeError as e:
            reraise_as(AttributeError("""
Encountered an AttributeError while trying to call get_weights on a model.
This probably means you need to implement get_weights for this model class,
but look at the original exception to be sure.
If this is an older model class, it may have weights stored as weightsShared,
etc.
Original exception: """ + str(e)))

    if W is None and weights_view is None:
        raise ValueError("model doesn't support any weights interfaces")

    if weights_view is None:
        weights_format = model.get_weights_format()
        assert hasattr(weights_format, '__iter__')
        assert len(weights_format) == 2
        assert weights_format[0] in ['v', 'h']
        assert weights_format[1] in ['v', 'h']
        assert weights_format[0] != weights_format[1]

        if weights_format[0] == 'v':
            W = W.T
        h = W.shape[0]

        if norm_sort:
            norms = np.sqrt(1e-8 + np.square(W).sum(axis=1))
            norm_prop = norms / norms.max()

        weights_view = dataset.get_weights_view(W)
        assert weights_view.shape[0] == h
    try:
        hr, hc = model.get_weights_view_shape()
    except NotImplementedError:
        hr = int(np.ceil(np.sqrt(h)))
        hc = hr
        if 'hidShape' in dir(model):
            hr, hc = model.hidShape

    grid_shape = (hr, hc)
    patch_shape = weights_view.shape[1:3]
    is_color = weights_view.shape[-1] == 3

    if norm_sort:
        logger.info('sorting weights by decreasing norm')
        idx = sorted(range(h), key=lambda l: -norm_prop[l])
    else:
        idx = range(h)

    patches = [weights_view[idx[i], ...] for i in range(0, h)]

    abs_weights = np.abs(weights_view)
    logger.info('smallest enc weight magnitude: {0}'.format(abs_weights.min()))
    logger.info('mean enc weight magnitude: {0}'.format(abs_weights.mean()))
    logger.info('max enc weight magnitude: {0}'.format(abs_weights.max()))

    if W is not None:
        norms = np.sqrt(np.square(W).sum(axis=1))
        assert norms.shape == (h, )
        logger.info('min norm: {0}'.format(norms.min()))
        logger.info('mean norm: {0}'.format(norms.mean()))
        logger.info('max norm: {0}'.format(norms.max()))

    return patches


def get_dataset_keywords(model_path=None, model=None):
    if model is None:
        logger.info('loading model')
        model = serial.load(model_path)
        logger.info('loading done')
    else:
        assert model_path is None
    assert model is not None
    dataset = pylearn2.config.yaml_parse.load(model.dataset_yaml_src,
                                              instantiate=False)
    assert dataset.callable is GTZAN_On_Memory
    return dataset.keywords


def calc_ispectrogram(weights, dataset):
    window = Spectrogram.window_types[dataset.window_type]
    return stft.ispectrogram(weights,
                             framelength=dataset.window_size,
                             hopsize=dataset.step_size,
                             overlap=dataset.step_size/dataset.window_size,
                             centered=True,  # not sure about this
                             window=window,
                             halved=True,
                             transform=None,
                             padding=0)


def play_weights(model_path=None, model=None, out=None):
    weights = get_weights(model_path=model_path, model=model)
    dataset_keywords = get_dataset_keywords(model_path=model_path, model=model)
    dataset = GTZAN(**dataset_keywords)
    audios = [calc_ispectrogram(w[:-1], dataset) for w in weights]
    import ipdb
    ipdb.set_trace()


def make_argument_parser():
    """
    Creates an ArgumentParser to read the options for this script from
    sys.argv
    """
    parser = argparse.ArgumentParser()

    parser.add_argument("--out", default=None)
    parser.add_argument("path")
    return parser


if __name__ == "__main__":
    parser = make_argument_parser()
    args = parser.parse_args()
    logger.info('loading model')
    model = serial.load(args.path)
    logger.info('loading done')
    play_weights(model=model, out=args.out)
